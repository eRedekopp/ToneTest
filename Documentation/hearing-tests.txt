Information about the hearing tests available in this application and their implementations

################################################# About Hearing Tests ##################################################

This application is all about performing hearing tests on participants. "Hearing Test" is the generic name given to any
test that plays tones and tests a participant's ability to correctly identify or hear those tones. The abstract class
from which all hearing tests inherit is called HearingTest. All hearing tests are contained within the HearingTest
module.

At the next level, there are two types of hearing tests: Calibration and Confidence. A calibration test can either be a
single test or a suite of tests designed to generate a model that can predict whether the participant will be able to
hear a different tone not necessarily tested in the calibration test. A confidence test performs more trials on fewer
tones to find the "true" probability that the user will hear those tones, and then compares the probability found to the
probabilities generated by any models previously generated by calibration tests for that participant

The following is a rough description of the two types of test. Specifics on the currently-available tests are provided
later in this document.

Calibration Tests:

    RampTest:
        For each frequency tested, play a tone quietly and get louder and louder until the user indicates that they've
        heard the tone. Then, cut the volume down to some fraction of the indicated volume and ramp up more slowly,
        giving the user the opportunity to give a more accurate answer.
    ReduceTest:
        The RampTest gives estimates for the top end of the user's ability to hear the tone, since they almost always
        pressed the button too late in early versions of this study that we piloted. The ReduceTest is intended to find
        the bottom end of the user's ability to hear. Starting at the volumes found by the RampTest, play each tone
        quieter and quieter, allowing the user to indicate whether they heard each tone (with a buffer of about 1-3
        seconds between tones). The volume "floor" is found when the user fails to hear the tone 2 times, so we give
        the user a small margin of error.
    CalibrationTest:
        Yeah I know the name is confusing. Look at the "potential confusion" alert below this. Based on the results of
        the ramp and reduce tests, it comes up with a range of volumes for each tested frequency that theoretically
        should represent various different audibilities of tones. Then it tests each of those some fixed number of
        times. The idea is that this should give us a fairly accurate representation of the "true" sigmoid graph of this
        user's probability of hearing the tone at various volumes.

A "3-phase calibration" is a ramp, reduce, and calibration test back-to-back. When information from previous tests in
the suite is not available to set up for a future test, it is inferred whenever possible, or taken from a previous test
suite. The goal is to make the ramp test powerful enough to obviate the need for the much longer and more painful
3-phase calibration.

Confidence Tests:

    Confidence tests simply choose a few tones to test based on the results of a previously-performed Calibration test
    (see data.txt for more on how this happens) and run several trials on each of them to try to find a "true" value
    for the probability of the participant hearing that tone. The results of a confidence test are used to test the
    accuracy of the models generated by previously-run calibration tests, and to test their predictive power on
    different types of tones. For example, the calibration test suites generally only test single-pitch sine waves, but
    the confidence test can check that calibration's ability to predict the user's probability of hearing a .wav
    "earcon" or a melody of sine waves.

The Calibration Test extends the SingleToneTest, meaning that the Calibration Test is only meant to test users on their
ability to hear a single tone (a sine wave, a single .wav earcon, but not an interval or melody). Early versions of this
project did include calibration tests that used intervals and/or melodies, but these were removed during one of this
project's many redesigns because the ramp test only tests single tones and we want to use the ramp test in the end
anyway. If for some reason you must perform calibrations with intervals, you can make a different subclass of
HearingTest, or maybe even just make CalibrationTest not inherit from SingleToneTest anymore because I'm not entirely
convinced that that class still makes sense with the current state of things. The ConfidenceTest can test any sort of
tone - we use this to test the predictive power of the Calibration and/or Ramp tests on tones that they did not test,
for example testing how well participants could distinguish melodies of sine waves based on their ramp test scores.

The CalibrationTest, ReduceTest, and RampTest all already have their run() methods implemented in the abstract class. A
particular subclass need only implement the playTone() method which plays the particular type of tone to be tested.
Everything else is generic enough that it can be handled by the abstract class.

It is worth noting that in order to allow tests to be paused and restarted, we usually first generate all the Tone
objects to be played in the test, put them in a list, and pop them after they've been played. That way, if the user
pauses and we get back into the run() method via checkForHearingTestResume(), it's just like we started the test all
over again except there are already some results stored and part of the Tone list is gone.


POTENTIAL CONFUSION ALERT

Due to the way this project evolved over time and my unfortunate lack of foresight, there are two meanings of the
phrase "Calibration Test" in this project. The first and most common usage is to mean the specific hearing test in
which participants are tested on the same tones multiple times each at various volumes. The other is to indicate any
suite of hearing tests which produces results that can be used to predict whether a participant will be able to hear a
particular tone. It should be clear from the context and/or comments which is being used. If you are reading this, it's
because I've decided that it's not worth my time to go through the project and rename one of them to make it more
readable for future programmers. Sorry, future programmer :( unless you are Eric, in which case I'm not sorry and you
only have yourself (ie. me) to blame

Eg. in HearingTestController, the function "calibrationTest" begins a test or suite of tests that may or may not contain
a "calibration test", but the private methods setupCalibrationTest and calibrationTestComplete pertain specifically to
the individual multi-tone test described in the first definition in the previous paragraph.


################################################## Calibration Tests ###################################################

This is information about how the tests are implemented and policy decisions around them. Tips for adding new tests can
be found in future.txt

Most of the real work for these tests is implemented in the top-level abstract class (eg. CalibrationTest), and all
types of test have an abstract class for working with .wav files in case we want to test users on real ringtones.
There's quite a lot of hard-coding involved in using .wav files for these tests, including finding the frequency of the
tone and marking it down, and associating a file with that tone. This is currently done in the WavTone constructor
itself, but that is sort of gross and I recommend changing that if you want to use more .wav files than the few I'm
using now.

Ramp Tests:
    The abstract Ramp class implements run(), and enforces that children must have getRampRate1 and getRampRate2, which
    return the rate at which the volume should increase for this ramp test, and rampUp(), which actually plays the tone
    louder and louder through the speakers. A SineRampTest does this by playing a sine wave with greater and greater
    amplitude, or the WavRampTest does it by repeatedly playing a tone (eg. a piano note).

Reduce Tests:
    Same as ramp tests, only piano and reduce. There really isn't much to say about these; they're fairly
    straightforward. Each child class needs to implement a playTone() method and that's about it. In these tests, only
    user interaction events registered while the tone was playing are valid, although all clicks are recorded in the
    file (see future.txt for how to change this)

Calibration Tests:
    Quite simple, like the Reduce Tests. However, calibration tests must also have a configureTestTones() method which
    generates the list of Tones to be played in this test. If there are any special things to be done in configuring
    test tones (eg. setting up .wav file associations or something), that happens in configureTestTones(). In these
    tests, only user interaction events registered while the tone was playing are valid, although all clicks are
    recorded in the file (see future.txt for how to change this)


################################################### Confidence Tests ###################################################

Confidence tests are implemented similarly to the others, with an abstract parent class doing most of the heavy lifting,
a .wav class for testing real tones, and small details implemented by the child classes.

Confidence tests are categorized by the timbre of the tone, the number of pitches played, and what we are testing the
user on.

    Timbre:
        - Sine   : Just a sine wave
        - Piano  : A .wav file of a piano note being played
        - Earcon : A .wav resource of an actual ringtone or earcon

    Number of pitches:
        - Single   : One pitch
        - Interval : Two pitches
        - Melody   : More than two pitches
        - Earcon   : A .wav resources with an arbitrary number of pitches

    Ability tested:
        - Audibility      : Can the user hear the tone at all?
        - Differentiation : Can the user differentiate between the pitches moving upward and downward?

All Single tests are Audibility tests by default. All confidence tests follow this naming scheme for easy classification


################################################ Running a Hearing Test ################################################

Each subclass of the abstract HearingTest class must have a run() method, which plays tones via the Model and tracks the
results in a stored HearingTestResults object (or not, in the case of a ReduceTest. see data.txt). The run() method is
called from HearingTestController.checkForHearingTestResume() - never called directly from setup*Test() or any other
method. All tests are started by setting them in the HearingTestInteractionModel and calling checkForHearingTestResume
(or causing it to be called indirectly via modelChanged()). The following is a more detailed description of the control
flow while starting a new test:

Calibration:
    Register "calibration" click in MainActivity
    Go to CalibSelectActivity, return with integer IDs for all selected options
        - or just end here if user cancelled in CalibSelectActivity screen
    Return to MainActivity, and pass the selected IDs to HearingTestController.calibrationTest()
    Select the appropriate test types and put into the HearingTestInteractionModel
        - 1 to 3, depending on user's selection. Set as fields in the iModel so we know which tests to run later on
        - set the first test as iModel.currentTest
        - null any tests that are not going to be run
    Set the test to paused, show the test information in a dialog to the user, then notifySubscribers() when done.
        - This causes MainActivity to call HearingTestController.checkForHearingTestResume(), which starts whichever
          test was put on deck by HearingTestController.calibrationTest() to begin
    Once the first test is complete, control is passed to to HearingTestController.*TestComplete, which saves the
        results of the test and starts the next test, if there is one
    If a user pauses during a test, execution hangs until the user un-pauses, at which time notifySubscribers() is
        called and the test is resumed as described above

    Note: multi-test suites are always executed in the following order: Ramp -> reduce -> calibration
        - because later tests depend on information from previous ones.
        - information may be taken from a previous test suite with the same noise type and volume, if needed
            - unless it's a reduce test. Reduce tests must immediately follow a ramp test

Confidence:
    Basically the same as calibration except there is only 1 test to be run, and there are more options for timbres and
    types, and we get options from user in ConfSelectActivity