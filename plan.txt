Personal note from Eric:

This project was the first time I've ever been paid to program, at the time of this writing it is the biggest project
I've ever worked on, and was mostly completed just after my 2nd year of university with very, very minimal supervision.
In hindsight, there's a lot of things I would have done differently (most notably, just thinking things through better
before starting to write code), and some of the code in here is outright awful. I've done a little bit of work to clean
things up, and I've documented everything to the best of my ability. Do not hesitate to contact me at
err291@mail.usask.ca if you have any questions about this code, or if you'd just like to berate me for being bad at
programming when I wrote this.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Overview/definitions:

HEARING TESTS

This application is all about performing hearing tests on participants. "Hearing Test" is the generic name given to any
test that plays tones and tests a participant's ability to correctly identify or hear those tones. The abstract class
from which all hearing tests inherit is called HearingTest. All hearing tests are contained within the HearingTest
module.

At the next level, there are two types of hearing tests: Calibration and Confidence. A calibration test can either be a
single test or a suite of tests designed to generate a model that can predict whether the participant will be able to
hear a different tone not necessarily tested in the calibration test. A confidence test performs more trials on fewer
tones to find the "true" probability that the user will hear those tones, and then compares the probability found to the
probabilities generated by any models previously generated by calibration tests for that participant

Calibration tests include the "ramp test", which starts a tone quietly then slowly increases the volume until the user
indicates that they can hear the tone; the "reduce test" which takes the volumes found by the ramp test and slowly
reduces the volumes until the user indicates that they can't hear it anymore; and the "calibration test" (see confusion
alert below) which tests several tones a few times each to try to get a somewhat-accurate picture of the "true" sigmoid
graph for the participant's probability of hearing those tones. A "3-phase calibration" is a ramp, reduce, and
calibration test back-to-back. When information from previous tests in the suite is not available to set up for a future
test, it is inferred whenever possible, or taken from a previous test suite. The goal is to make the ramp test powerful
enough to obviate the need for the much longer and more painful 3-phase calibration.

Confidence tests simply choose a few tones to test and run several trials on each of them to try to find a "true" value
for the probability of the participant hearing that tone. The results of a confidence test are used to test the accuracy
of the models generated by previously-run calibration tests, and to test their predictive power on different types of
tones. For example. the confidence test suites generally only test single-pitch sine waves, but the confidence test can
check that calibration's ability to predict the user's probability of hearing a .wav "earcon" or a melody of sine waves.


POTENTIAL CONFUSION ALERT

Due to the way this project evolved over time and my unfortunate lack of foresight, there are two meanings of the
phrase "Calibration Test" in this project. The first and most common usage is to mean the specific hearing test in
which participants are tested on the same tones multiple times each at various volumes. The other is to indicate any
suite of hearing tests which produces results that can be used to predict whether a participant will be able to hear a
particular tone. It should be clear from the context and/or comments which is being used. If you are reading this, it's
because I've decided that it's not worth my time to go through the project and rename one of them to make it more
readable for future programmers. Sorry, future programmer :( unless you are Eric, in which case I'm not sorry and you
only have yourself (ie. me) to blame

Eg. in HearingTestController, the function "calibrationTest" begins a test or suite of tests that may or may not contain
a "calibration test", but the private methods setupCalibrationTest and calibrationTestComplete pertain specifically to
the individual multi-tone test described in the first definition in the previous paragraph.

##############################

PARTICIPANTS / FILE IO

A "participant" is an individual person who has taken or will take hearing tests with this application. A participant is
assigned a directory on whichever device this application is being run on when they are first logged in. In that
directory is a single "calibration file" in which the participant's Calibration Test results are stored. A line is
saved in that file for every tone that is played in the test, containing information about the tone and the user's
response to it. A line is saved before and after the test to indicate the beginning and end of the test. Ramp, Reduce,
and Calibration tests are saved as separate tests. At login time, data is loaded from this calibration file into a
Participant object which will be used until the user switches participants or exits the application. Each confidence
test is saved in an individual file in the user's directory, and contains human-readable statistical data at the end of
the file.

For more information, see "files" below

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Running tests:


Calibration:
    Register "calibration" click in MainActivity
    Go to CalibSelectActivity, return with integer IDs for all selected options
        - or just end here if user cancelled in CalibSelectActivity screen
    Return to MainActivity, and pass the selected IDs to HearingTestController.calibrationTest()
    Select the appropriate test types and put into the HearingTestInteractionModel
        - 1 to 3, depending on user's selection. Set as fields in the iModel so we know which tests to run later on
        - set the first test as iModel.currentTest
        - null any tests that are not going to be run
    Set the test to paused, show the test information in a dialog to the user, then notifySubscribers() when done.
        - This causes MainActivity to call HearingTestController.checkForHearingTestResume(), which starts whichever
          test was put on deck by HearingTestController.calibrationTest() to begin
    Once the first test is complete, control is passed to to HearingTestController.*TestComplete, which saves the
        results of the test and starts the next test, if there is one
    If a user pauses during a test, execution hangs until the user un-pauses, at which time notifySubscribers() is
        called and the test is resumed as described above

    Note: multi-test suites are always executed in the following order: Ramp -> reduce -> calibration
        - because later tests depend on information from previous ones.
        - information may be taken from a previous test suite with the same noise type and volume, if needed
            - unless it's a reduce test. Reduce tests must immediately follow a ramp test

Confidence:
    Basically the same as calibration except there is only 1 test to be run, and there are more options for timbres and
    types, and we get options from user in ConfSelectActivity

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Login screen:

    New Participant
        - Use ID in text box
        - If participant with that number already exists, ask to overwrite
            - Archive old file, just in case
    Load Participant
        - Use ID in text box
        - If noticed a half-finished test, ask to resume (in case of crashes)
    Skip This Step
        - Login with default user

The login screen returns to the main activity with only a participant ID. Participant files are guaranteed to exist when
control returns to the main activity - if creating a new participant, empty files are created by the login screen before
returning. Files are loaded via the FileIOController from MainActivity after returning

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Files:

Individual participant files are kept in one folder per participant, which contains a single calibration file containing
information about all calibrations taken by this participant, and one file per confidence test

Calibration result file (one per participant):
    Named Calibration_N where N is the participant number

    START-TEST <DATE> <TEST-TYPE> <NOISE>
    <TIME> <FREQ> <VOL> <DIRECTION> <CORRECT?> <NUM-CLICKS> <CLICK-STRING>
    ...
    END-TEST

    A ramp test contains 2 lines per frequency: one for each ramp-up


Confidence result file (one per test):
    Named Confidence_DATE_N where DATE is the current date/time and N is the participant number

    START-TEST <TEST-TYPE> <NOISE> <DATE>
    <TIME> <FREQ> <VOL> <DIRECTION> <CORRECT?> <NUM-CLICKS> <CLICK-STRING>
    ...
    END-TEST

    ResultsAsString, like in the previous version
    Other metadata and stats
