How do we control for false alarms?
  - Ask carl? Need incentive to force one way or another?
Constructing 95% CI for confidence trial
  - Stats textbook p395
  - https://www.desmos.com/calculator/urltj90ojf
    - size of confidence interval as function of test proportion
  - n = 20 trials per FVP gives 95% CI with width 8% to 20%
  - https://www.desmos.com/calculator/bjzixmtknu
    - Need a huge number of trials to get any sort of accuracy
  - stats textbook p452 type II error probabilities

Things to do while waiting for pilot results:
    - analyze interval results
    - add "wait" screen for earcon selection and results analysis
    - force up, flat, down buttons to fit layout more precisely
    - Make Short conversion marginally more efficient (see todos)

Earcon models tried (based only on self-tests):
    - n=50 samples of 1000 using only most prominent frequency from each:
            - Guesses within ~30%
            - Inconsistent: wrong in both directions
    - n=2 samples from very beginning and very end:
            - Close for low frequencies but off by ~40% for higher probabilities
            - Guesses low, generally
            - Doesn't seem to generate probabilities over 50%
    - Above, except cuts off last 2000 samples from earcon
            - Actually somewhat accurate
            - Frequencies from periodogram are not even close to actual frequencies, end frequency always 8.0
    - n=50 samples of 1000 using only most prominent frequency from each:
            - Seems to guess within 20%
            - Tends to guess high
    - All of the above are bad for "neg" earcon
    - n=50 samples of 1000 using top 3 most prominent frequencies in each, probability averaged of all with equal weight
            - Guesses within about 15%
            - Most accurate so far


Big Refactor:
    Done:
        - simple sine confidence test
        - ramp test and reduce test
        - adjust reduce test to use SingleTrialResults
        - implement main ToneTest
        - make playTone() abstract method for confidence test
        - make CalibrationTestResults more generic
        - implement controller to run tests
        - fix FileNameController
        - adjust UI to make new test runnable
        - Add analysis to confidence test
        - Play sample tones before confidence test
        - Read Carl's paper outline
        - Make sure that confidence statistics save/are calculated properly
        - Figure out why playSine doesn't work anymore
        - Figure out why FileIOController sometimes throws NullPointerException (Done, I think)
        - Boost volumes in ToneTest (boost top vol estimates?) / Conf Test ( 3 "loud" ones in confidence test)
        - Generate model based on RampTest results alone
        - Adjust RampTest and FileIOController as necessary
        - Full self-test - make sure ramp results are reasonable
        - Choppy audio? (problem fixed itself ???? maybe something to do with the tablet itself)
        - Add calibration info to confidence test file
        - Add test type options before test
        - Overload probability methods for different tones

    Next:
        - Add remaining sine tests
        - Look into programmatically generating earcons via MIDI
        - Save calibration analysis in different file than test results
        - Look into whether internal mixer affects waveform
        - Improve aesthetics / code style / documentation / write developer guide
        - Find a way to eliminate break in crowd noise (low priority) (silence at end of wav?)
        - Normalize background noise types to same volume scale as sines/earcons (wait to hear from Carl about final
            test format - don't bother if we aren't using the background noise generator in the real thing)

    Confidence tests to add:
        - <DONE> Sine interval
        - Sine earcon
        - Wav earcon
    Calibration tests to add:
        - Piano
