"""
A command line tool that takes a pathname of a calibration .csv file generated by ToneSetAndroid,
generates a chart from the data, and saves it as a .png
"""

import sys
import matplotlib.pyplot as plt
import numpy as np


def read_csv(abs_path):
    with open(abs_path, 'r') as f:
        subID = f.readline().split(' ')[1]  # get subject id
        f.readline()  # skip header
        freq_results = {}  # map frequencies to tuple = (vol, P(heard))
        for line in f.readlines():
            line = line.split(',')
            freq = float(line[0])
            vol = float(line[1])
            n_heard = int(line[2])
            n_not_heard = int(line[3])
            total = n_heard + n_not_heard
            p = float(n_heard) / float(total)
            if freq in list(freq_results):
                freq_results[freq].append((vol, p))
            else:
                freq_results[freq] = [(vol, p)]
        del freq_results[200]    # delete result for 200Hz because it makes the chart look awful
        return subID, freq_results


def generate_graph(freq_results):
    subID = freq_results[0]         # parse output from read_csv
    freq_results = freq_results[1]

    line_color_args = ["ro-", "yo-", "bo-", "go-", "mo-", "co-", "ko-"]  # arrange data
    freq_list = []
    x_data = []
    y_data = []
    for freq in list(freq_results):
        pairs = freq_results[freq]
        freq_list.append(freq)
        new_x_list = []
        new_y_list = []
        for pair in pairs:
            new_x_list.append(pair[0])
            new_y_list.append(pair[1])
        x_data.append(new_x_list)
        y_data.append(new_y_list)

    max_x = float(max([max(lst) for lst in x_data]))        # aesthetics
    x_ticks = np.arange(0, max_x, 100)
    y_ticks = np.arange(0, 1.1, 0.1)
    plt.xticks(x_ticks)
    plt.yticks(y_ticks)
    plt.figure(figsize=(12, 6))
    plt.xlabel("Volume")
    plt.ylabel("P(heard)")
    plt.title("Participant " + subID + " Calibration")

    for i in range(len(x_data)):            # plot
        plt.plot(x_data[i], y_data[i], line_color_args[i], label=str(freq_list[i]) + " Hz")

    plt.legend()
    plt.savefig(sys.argv[1][0:-4]+"_plot")  # use same name as calibration file


if __name__ == "__main__":
    if len(sys.argv) == 2:
        try:
            generate_graph(read_csv(sys.argv[1]))
        except FileNotFoundError:
            print("File not found : " + sys.argv[1])
    else:
        print("Usage: " + sys.argv[0] + " absolute/file/path.csv")
