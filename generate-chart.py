"""
A command line tool that takes a pathname of a calibration .csv file generated by ToneSetAndroid,
generates a chart from the data, and saves it as a .png

NOTE: I haven't used this code in months and I don't think it works with the new way that it saves and loads files
after I revamped the system in February. It is left here for posterity in case someone wants to adapt it to work with
the new system.
"""

import sys
import matplotlib.pyplot as plt


def read_csv(abs_path):
    with open(abs_path, 'r') as f:
        subID = f.readline().split(' ')[1]  # get subject id
        f.readline()  # skip header
        freq_results = {}  # map frequencies to tuple = (vol, P(heard))
        for line in f.readlines():
            line = line.split(',')
            freq = line[0]
            vol = line[1]
            p = float(line[2]) / float(line[2] + line[3])
            if freq in list(freq_results):
                freq_results[freq].append((vol, p))
            else:
                freq_results[freq] = [(vol, p)]
        return subID, freq_results


def generate_graph(freq_results):
    subID = freq_results[0]         # parse output from read_csv
    freq_results = freq_results[1]

    line_color_args = ["ro-", "yo-", "bo-", "go-", "mo-", "co-", "ko-"]  # arrange data
    freq_list = []
    x_data = []
    y_data = []
    for freq in list(freq_results):
        pairs = freq_results[freq]
        freq_list.append(freq)
        new_x_list = []
        new_y_list = []
        for pair in pairs:
            new_x_list.append(pair[0])
            new_y_list.append(pair[1])
        x_data.append(new_x_list)
        y_data.append(new_y_list)

    for i in range(len(x_data)):        # plot
        plt.plot(x_data[i], y_data[i], line_color_args[i], label=str(freq_list[i]) + " Hz")

    plt.xlabel("Volume")                # beautify
    plt.ylabel("P(heard)")
    plt.title("Participant " + subID + " Calibration")

    plt.savefig("Subject"+subID)


if __name__ == "__main__":
    if len(sys.argv) == 2:
        try:
            generate_graph(read_csv(sys.argv[1]))
        except FileNotFoundError:
            print("File not found : " + sys.argv[1])
    else:
        print("Usage: " + sys.argv[0] + " absolute/file/path.csv")






